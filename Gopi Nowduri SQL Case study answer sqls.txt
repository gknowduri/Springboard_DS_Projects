https://frankfletcher.co/springboard_phpmyadmin/index.php?route=/database/sql&db=country_club

modal (popup) dialog  username password : student / springboardbackup
The phpmyadmin username password : admin_springboard / springboardbackup
The database is also named : admin_springboard

The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table.


Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do.

select name from Facilities where membercost > 0;
-----------------------------
Q2: How many facilities do not charge a fee to members? 

select name from Facilities where membercost = 0;

-----------------------------
Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question.

select facid,expense_label 'facility name',membercost 'member cost',monthlymaintenance 'monthly maintenance' 
  from Facilities where membercost < ((20)*monthlymaintenance)/100;
-----------------------------------
Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator.

select * from Facilities where facid in (1,5);
-----------------------------------
Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question.

select name,monthlymaintenance 'monthly maintenance'
,case when monthlymaintenance <= 100 then 'cheap'
      when monthlymaintenance > 100 then 'expensive'
 end expense_label     
      from Facilities 
----------------------
Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution.

select firstname,surname from Members 
where joindate = (select max(joindate) from Members)
;
--------------------------
Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name.

select distinct concat(F.name,m.firstname) court_member
  from Members m 
  join Bookings b 
    on b.memid = m.memid
  join Facilities F   
    on b.facid = F.facid
##    and F.name like '%Tennis Court%' 
where b.facid in (select facid from Facilities where name like '%Tennis Court%')
order by m.firstname
;
-----------------------------
Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries.

select distinct concat(F.name,m.firstname),
       case when b.memid = 0 then F.guestcost*b.slots 
            else F.membercost*b.slots 
        end cost
  from Bookings b 
       join Members m 
            on b.memid = m.memid
       join Facilities F 
            on F.facid = b.facid
where date(b.starttime) = '2012-09-14'
and  (case when b.memid = 0 then F.guestcost*b.slots > 30
         else F.membercost*b.slots > 30
    end)  
--------------------------------------

Q9: This time, produce the same result as in Q8, but using a subquery.

select label_name,cost from (
select distinct concat(F.name,m.firstname) label_name,
       case when b.memid = 0 then F.guestcost*b.slots 
            else F.membercost*b.slots 
        end cost
  from Bookings b 
       join Members m 
            on b.memid = m.memid
       join Facilities F 
            on F.facid = b.facid
where date(b.starttime) = '2012-09-14'
) aa
where cost > 30
 ---------------------------------------

Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! 

select bagg.facid,f.name,guest_sum*guestcost+member_sum*membercost revenue from (
select facid,sum(case when memid=0 then slots else 0 end) guest_sum,
sum(case when memid<>0 then slots else 0 end) member_sum
from Bookings
group by facid
order by facid
    ) bagg
join Facilities f 
  on bagg.facid = f.facid
order by revenue
;
 ---------------------------------------

Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order

select m.surname,m.firstname
, case when recom_by.surname = 'GUEST' then 'none' else recom_by.surname  END recbysurname
, case when recom_by.firstname = 'GUEST' then 'none' else recom_by.firstname  END recbyfirstname
from
(select memid,surname,firstname,recommendedby from Members) m 
left JOIN
(select memid,surname,firstname from Members) recom_by
on m.recommendedby = recom_by.memid
order by m.surname,m.firstname
;
 ---------------------------------------

Q12: Find the facilities with their usage by member, but not guests

select f.name,b.member_hours_used from 
(
select facid,
sum(case when memid<>0 then slots else 0 end)*0.5 member_hours_used
from Bookings
group by facid
order by facid
    ) b 
join Facilities f
  on b.facid = f.facid
;
---------------------------------------

Q13: Find the facilities usage by month, but not guests 

select f.name,mth,num_of_lots * membercost usage_by_month from (
(select facid,cast(substr(starttime,6,2) as integer) mth,sum(case when memid <> 0 then slots else 0 end) num_of_lots from Bookings ) b
JOIN
Facilities f 
 on b.facid = f.facid
) 
;
--------------------------------
